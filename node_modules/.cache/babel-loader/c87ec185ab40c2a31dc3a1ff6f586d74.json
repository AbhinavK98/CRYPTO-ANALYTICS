{"ast":null,"code":"import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, deepEqual, FirebaseError, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass PlatformLoggerServiceImpl {\n  constructor(container) {\n    this.container = container;\n  } // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n\n\n  getPlatformInfoString() {\n    const providers = this.container.getProviders(); // Loop through providers and get library/version pairs from any that are\n    // version components.\n\n    return providers.map(provider => {\n      if (isVersionServiceProvider(provider)) {\n        const service = provider.getImmediate();\n        return `${service.library}/${service.version}`;\n      } else {\n        return null;\n      }\n    }).filter(logString => logString).join(' ');\n  }\n\n}\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\n\n\nfunction isVersionServiceProvider(provider) {\n  const component = provider.getComponent();\n  return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\"\n  /* VERSION */\n  ;\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.7.33\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst logger = new Logger('@firebase/app');\nconst name$n = \"@firebase/app-compat\";\nconst name$m = \"@firebase/analytics-compat\";\nconst name$l = \"@firebase/analytics\";\nconst name$k = \"@firebase/app-check-compat\";\nconst name$j = \"@firebase/app-check\";\nconst name$i = \"@firebase/auth\";\nconst name$h = \"@firebase/auth-compat\";\nconst name$g = \"@firebase/database\";\nconst name$f = \"@firebase/database-compat\";\nconst name$e = \"@firebase/functions\";\nconst name$d = \"@firebase/functions-compat\";\nconst name$c = \"@firebase/installations\";\nconst name$b = \"@firebase/installations-compat\";\nconst name$a = \"@firebase/messaging\";\nconst name$9 = \"@firebase/messaging-compat\";\nconst name$8 = \"@firebase/performance\";\nconst name$7 = \"@firebase/performance-compat\";\nconst name$6 = \"@firebase/remote-config\";\nconst name$5 = \"@firebase/remote-config-compat\";\nconst name$4 = \"@firebase/storage\";\nconst name$3 = \"@firebase/storage-compat\";\nconst name$2 = \"@firebase/firestore\";\nconst name$1 = \"@firebase/firestore-compat\";\nconst name = \"firebase\";\nconst version = \"9.10.0\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\nconst PLATFORM_LOG_STRING = {\n  [name$o]: 'fire-core',\n  [name$n]: 'fire-core-compat',\n  [name$l]: 'fire-analytics',\n  [name$m]: 'fire-analytics-compat',\n  [name$j]: 'fire-app-check',\n  [name$k]: 'fire-app-check-compat',\n  [name$i]: 'fire-auth',\n  [name$h]: 'fire-auth-compat',\n  [name$g]: 'fire-rtdb',\n  [name$f]: 'fire-rtdb-compat',\n  [name$e]: 'fire-fn',\n  [name$d]: 'fire-fn-compat',\n  [name$c]: 'fire-iid',\n  [name$b]: 'fire-iid-compat',\n  [name$a]: 'fire-fcm',\n  [name$9]: 'fire-fcm-compat',\n  [name$8]: 'fire-perf',\n  [name$7]: 'fire-perf-compat',\n  [name$6]: 'fire-rc',\n  [name$5]: 'fire-rc-compat',\n  [name$4]: 'fire-gcs',\n  [name$3]: 'fire-gcs-compat',\n  [name$2]: 'fire-fst',\n  [name$1]: 'fire-fst-compat',\n  'fire-js': 'fire-js',\n  [name]: 'fire-js-all'\n};\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @internal\r\n */\n\nconst _apps = new Map();\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nconst _components = new Map();\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\n\n\nfunction _addComponent(app, component) {\n  try {\n    app.container.addComponent(component);\n  } catch (e) {\n    logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\n  }\n}\n/**\r\n *\r\n * @internal\r\n */\n\n\nfunction _addOrOverwriteComponent(app, component) {\n  app.container.addOrOverwriteComponent(component);\n}\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\n\n\nfunction _registerComponent(component) {\n  const componentName = component.name;\n\n  if (_components.has(componentName)) {\n    logger.debug(`There were multiple attempts to register component ${componentName}.`);\n    return false;\n  }\n\n  _components.set(componentName, component); // add the component to existing app instances\n\n\n  for (const app of _apps.values()) {\n    _addComponent(app, component);\n  }\n\n  return true;\n}\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\n\n\nfunction _getProvider(app, name) {\n  const heartbeatController = app.container.getProvider('heartbeat').getImmediate({\n    optional: true\n  });\n\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n\n  return app.container.getProvider(name);\n}\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\n\n\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\n\n\nfunction _clearComponents() {\n  _components.clear();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst ERRORS = {\n  [\"no-app\"\n  /* NO_APP */\n  ]: \"No Firebase App '{$appName}' has been created - \" + 'call Firebase App.initializeApp()',\n  [\"bad-app-name\"\n  /* BAD_APP_NAME */\n  ]: \"Illegal App name: '{$appName}\",\n  [\"duplicate-app\"\n  /* DUPLICATE_APP */\n  ]: \"Firebase App named '{$appName}' already exists with different options or config\",\n  [\"app-deleted\"\n  /* APP_DELETED */\n  ]: \"Firebase App named '{$appName}' already deleted\",\n  [\"invalid-app-argument\"\n  /* INVALID_APP_ARGUMENT */\n  ]: 'firebase.{$appName}() takes either no argument or a ' + 'Firebase App instance.',\n  [\"invalid-log-argument\"\n  /* INVALID_LOG_ARGUMENT */\n  ]: 'First argument to `onLog` must be null or a function.',\n  [\"idb-open\"\n  /* IDB_OPEN */\n  ]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [\"idb-get\"\n  /* IDB_GET */\n  ]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [\"idb-set\"\n  /* IDB_WRITE */\n  ]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [\"idb-delete\"\n  /* IDB_DELETE */\n  ]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\n};\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass FirebaseAppImpl {\n  constructor(options, config, container) {\n    this._isDeleted = false;\n    this._options = Object.assign({}, options);\n    this._config = Object.assign({}, config);\n    this._name = config.name;\n    this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(new Component('app', () => this, \"PUBLIC\"\n    /* PUBLIC */\n    ));\n  }\n\n  get automaticDataCollectionEnabled() {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name() {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options() {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config() {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container() {\n    return this._container;\n  }\n\n  get isDeleted() {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val) {\n    this._isDeleted = val;\n  }\n  /**\r\n   * This function will throw an Error if the App has already been deleted -\r\n   * use before performing API actions on the App.\r\n   */\n\n\n  checkDestroyed() {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(\"app-deleted\"\n      /* APP_DELETED */\n      , {\n        appName: this._name\n      });\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\n\n\nconst SDK_VERSION = version;\n\nfunction initializeApp(options, rawConfig = {}) {\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = {\n      name\n    };\n  }\n\n  const config = Object.assign({\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false\n  }, rawConfig);\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(\"bad-app-name\"\n    /* BAD_APP_NAME */\n    , {\n      appName: String(name)\n    });\n  }\n\n  const existingApp = _apps.get(name);\n\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (deepEqual(options, existingApp.options) && deepEqual(config, existingApp.config)) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(\"duplicate-app\"\n      /* DUPLICATE_APP */\n      , {\n        appName: name\n      });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\n\n\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\n  const app = _apps.get(name);\n\n  if (!app) {\n    throw ERROR_FACTORY.create(\"no-app\"\n    /* NO_APP */\n    , {\n      appName: name\n    });\n  }\n\n  return app;\n}\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\n\n\nfunction getApps() {\n  return Array.from(_apps.values());\n}\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\n\n\nasync function deleteApp(app) {\n  const name = app.name;\n\n  if (_apps.has(name)) {\n    _apps.delete(name);\n\n    await Promise.all(app.container.getProviders().map(provider => provider.delete()));\n    app.isDeleted = true;\n  }\n}\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\n\n\nfunction registerVersion(libraryKeyOrName, version, variant) {\n  var _a; // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n\n\n  let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\n\n  if (variant) {\n    library += `-${variant}`;\n  }\n\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n\n  if (libraryMismatch || versionMismatch) {\n    const warning = [`Unable to register library \"${library}\" with version \"${version}\":`];\n\n    if (libraryMismatch) {\n      warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\n    }\n\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n\n    if (versionMismatch) {\n      warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\n    }\n\n    logger.warn(warning.join(' '));\n    return;\n  }\n\n  _registerComponent(new Component(`${library}-version`, () => ({\n    library,\n    version\n  }), \"VERSION\"\n  /* VERSION */\n  ));\n}\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\n\n\nfunction onLog(logCallback, options) {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(\"invalid-log-argument\"\n    /* INVALID_LOG_ARGUMENT */\n    );\n  }\n\n  setUserLogHandler(logCallback, options);\n}\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\n\n\nfunction setLogLevel(logLevel) {\n  setLogLevel$1(logLevel);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\nlet dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDB(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(\"idb-open\"\n      /* IDB_OPEN */\n      , {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n\n  return dbPromise;\n}\n\nasync function readHeartbeatsFromIndexedDB(app) {\n  var _a;\n\n  try {\n    const db = await getDbPromise();\n    return db.transaction(STORE_NAME).objectStore(STORE_NAME).get(computeKey(app));\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(\"idb-get\"\n      /* IDB_GET */\n      , {\n        originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\n  var _a;\n\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    return tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(\"idb-set\"\n      /* IDB_WRITE */\n      , {\n        originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app) {\n  return `${app.name}!${app.options.appId}`;\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst MAX_HEADER_BYTES = 1024; // 30 days\n\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nclass HeartbeatServiceImpl {\n  constructor(container) {\n    this.container = container;\n    /**\r\n     * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n     * the header string.\r\n     * Stores one record per date. This will be consolidated into the standard\r\n     * format of one record per user agent string before being sent as a header.\r\n     * Populated from indexedDB when the controller is instantiated and should\r\n     * be kept in sync with indexedDB.\r\n     * Leave public for easier testing.\r\n     */\n\n    this._heartbeatsCache = null;\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n  /**\r\n   * Called to report a heartbeat. The function will generate\r\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n   * to IndexedDB.\r\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n   * already logged, subsequent calls to this function in the same day will be ignored.\r\n   */\n\n\n  async triggerHeartbeat() {\n    const platformLogger = this.container.getProvider('platform-logger').getImmediate(); // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n\n    if (this._heartbeatsCache === null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n    } // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n\n\n    if (this._heartbeatsCache.lastSentHeartbeatDate === date || this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({\n        date,\n        agent\n      });\n    } // Remove entries older than 30 days.\n\n\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\n      const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n      const now = Date.now();\n      return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n    });\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n  /**\r\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n   * It also clears all heartbeats from memory as well as in IndexedDB.\r\n   *\r\n   * NOTE: Consuming product SDKs should not send the header if this method\r\n   * returns an empty string.\r\n   */\n\n\n  async getHeartbeatsHeader() {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    } // If it's still null or the array is empty, there is no data to send.\n\n\n    if (this._heartbeatsCache === null || this._heartbeatsCache.heartbeats.length === 0) {\n      return '';\n    }\n\n    const date = getUTCDateString(); // Extract as many heartbeats from the cache as will fit under the size limit.\n\n    const {\n      heartbeatsToSend,\n      unsentEntries\n    } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\n    const headerString = base64urlEncodeWithoutPadding(JSON.stringify({\n      version: 2,\n      heartbeats: heartbeatsToSend\n    })); // Store last sent date to prevent another being logged/sent for the same day.\n\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries; // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = []; // Do not wait for this, to reduce latency.\n\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n\n    return headerString;\n  }\n\n}\n\nfunction getUTCDateString() {\n  const today = new Date(); // Returns date format 'YYYY-MM-DD'\n\n  return today.toISOString().substring(0, 10);\n}\n\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend = []; // Single date format heartbeats that are not sent.\n\n  let unsentEntries = heartbeatsCache.slice();\n\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\n\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date); // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    } // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n\n\n    unsentEntries = unsentEntries.slice(1);\n  }\n\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nclass HeartbeatStorageImpl {\n  constructor(app) {\n    this.app = app;\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n\n  async runIndexedDBEnvironmentCheck() {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable().then(() => true).catch(() => false);\n    }\n  }\n  /**\r\n   * Read all heartbeats.\r\n   */\n\n\n  async read() {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n\n    if (!canUseIndexedDB) {\n      return {\n        heartbeats: []\n      };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      return idbHeartbeatObject || {\n        heartbeats: []\n      };\n    }\n  } // overwrite the storage with the provided heartbeats\n\n\n  async overwrite(heartbeatsObject) {\n    var _a;\n\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  } // add heartbeats\n\n\n  async add(heartbeatsObject) {\n    var _a;\n\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [...existingHeartbeatsObject.heartbeats, ...heartbeatsObject.heartbeats]\n      });\n    }\n  }\n\n}\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\n\n\nfunction countBytes(heartbeatsCache) {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding( // heartbeatsCache wrapper properties\n  JSON.stringify({\n    version: 2,\n    heartbeats: heartbeatsCache\n  })).length;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction registerCoreComponents(variant) {\n  _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\"\n  /* PRIVATE */\n  ));\n\n  _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\"\n  /* PRIVATE */\n  )); // Register `app` package.\n\n\n  registerVersion(name$o, version$1, variant); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name$o, version$1, 'esm2017'); // Register platform SDK identifier (no version).\n\n  registerVersion('fire-js', '');\n}\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\n\n\nregisterCoreComponents('');\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };","map":{"version":3,"sources":["../../src/platformLoggerService.ts","../../src/logger.ts","../../src/constants.ts","../../src/internal.ts","../../src/errors.ts","../../src/firebaseApp.ts","../../src/api.ts","../../src/indexeddb.ts","../../src/heartbeatService.ts","../../src/registerCoreComponents.ts","../../src/index.ts"],"names":["appName","appCompatName","analyticsName","analyticsCompatName","appCheckName","appCheckCompatName","authName","authCompatName","databaseName","databaseCompatName","functionsName","functionsCompatName","installationsName","installationsCompatName","messagingName","messagingCompatName","performanceName","performanceCompatName","remoteConfigName","remoteConfigCompatName","storageName","storageCompatName","firestoreName","firestoreCompatName","packageName","setLogLevelImpl","name","version"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call Firebase App.initializeApp()',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  private readonly _options: FirebaseOptions;\n  private readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  private _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { _apps, _components, _registerComponent } from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport { deepEqual } from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\nexport function initializeApp(\n  options: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  const name = app.name;\n  if (_apps.has(name)) {\n    _apps.delete(name);\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    return db\n      .transaction(STORE_NAME)\n      .objectStore(STORE_NAME)\n      .get(computeKey(app)) as Promise<HeartbeatsInIndexedDB | undefined>;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    return tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (hearbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    const platformLogger = this.container\n      .getProvider('platform-logger')\n      .getImmediate();\n\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache === null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (\n      this._heartbeatsCache.lastSentHeartbeatDate === date ||\n      this._heartbeatsCache.heartbeats.some(\n        singleDateHeartbeat => singleDateHeartbeat.date === date\n      )\n    ) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({ date, agent });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(\n      singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      }\n    );\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (\n      this._heartbeatsCache === null ||\n      this._heartbeatsCache.heartbeats.length === 0\n    ) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n      this._heartbeatsCache.heartbeats\n    );\n    const headerString = base64urlEncodeWithoutPadding(\n      JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n    );\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      return idbHeartbeatObject || { heartbeats: [] };\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n"]},"metadata":{},"sourceType":"module"}