{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-crypto-tracker-Firebase-Integration\\\\src\\\\CryptoContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { auth, db } from \"./firebase\";\nimport axios from \"axios\";\nimport { CoinList } from \"./config/api\";\nimport { onSnapshot, doc } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Crypto = /*#__PURE__*/createContext();\n\nconst CryptoContext = ({\n  children\n}) => {\n  _s();\n\n  const [currency, setCurrency] = useState(\"INR\");\n  const [symbol, setSymbol] = useState(\"₹\");\n  const [alert, setAlert] = useState({\n    open: false,\n    message: \"\",\n    type: \"success\"\n  });\n  const [user, setUser] = useState(null);\n  const [coins, setCoins] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [watchlist, setWatchlist] = useState([]);\n  useEffect(() => {\n    if (user) {\n      const coinRef = doc(db, \"watchlist\", user === null || user === void 0 ? void 0 : user.uid);\n      var unsubscribe = onSnapshot(coinRef, coin => {\n        if (coin.exists()) {\n          console.log(coin.data().coins);\n          setWatchlist(coin.data().coins);\n        } else {\n          console.log(\"No Items in Watchlist\");\n        }\n      });\n      return () => {\n        unsubscribe();\n      };\n    }\n  }, [user]);\n  useEffect(() => {\n    onAuthStateChanged(auth, user => {\n      if (user) setUser(user);else setUser(null);\n    });\n  }, []);\n\n  const fetchCoins = async () => {\n    setLoading(true);\n    const {\n      data\n    } = await axios.get(CoinList(currency));\n    setCoins(data);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (currency === \"INR\") setSymbol(\"₹\");else if (currency === \"USD\") setSymbol(\"$\");\n    fetchCoins(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currency]);\n  return /*#__PURE__*/_jsxDEV(Crypto.Provider, {\n    value: {\n      currency,\n      setCurrency,\n      symbol,\n      alert,\n      setAlert,\n      user,\n      coins,\n      loading,\n      watchlist\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CryptoContext, \"8gwqIRtjTzOEEHTlwHo5Rcj8ebA=\");\n\n_c = CryptoContext;\nexport default CryptoContext;\nexport const CryptoState = () => {\n  _s2();\n\n  return useContext(Crypto);\n};\n\n_s2(CryptoState, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\n_c2 = CryptoState;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CryptoContext\");\n$RefreshReg$(_c2, \"CryptoState\");","map":{"version":3,"sources":["D:/react-crypto-tracker-Firebase-Integration/src/CryptoContext.js"],"names":["createContext","useContext","useEffect","useState","onAuthStateChanged","auth","db","axios","CoinList","onSnapshot","doc","Crypto","CryptoContext","children","currency","setCurrency","symbol","setSymbol","alert","setAlert","open","message","type","user","setUser","coins","setCoins","loading","setLoading","watchlist","setWatchlist","coinRef","uid","unsubscribe","coin","exists","console","log","data","fetchCoins","get","CryptoState"],"mappings":"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","sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { auth, db } from \"./firebase\";\nimport axios from \"axios\";\nimport { CoinList } from \"./config/api\";\nimport { onSnapshot, doc } from \"firebase/firestore\";\n\nconst Crypto = createContext();\n\nconst CryptoContext = ({ children }) => {\n  const [currency, setCurrency] = useState(\"INR\");\n  const [symbol, setSymbol] = useState(\"₹\");\n  const [alert, setAlert] = useState({\n    open: false,\n    message: \"\",\n    type: \"success\",\n  });\n  const [user, setUser] = useState(null);\n  const [coins, setCoins] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [watchlist, setWatchlist] = useState([]);\n\n  useEffect(() => {\n    if (user) {\n      const coinRef = doc(db, \"watchlist\", user?.uid);\n      var unsubscribe = onSnapshot(coinRef, (coin) => {\n        if (coin.exists()) {\n          console.log(coin.data().coins);\n          setWatchlist(coin.data().coins);\n        } else {\n          console.log(\"No Items in Watchlist\");\n        }\n      });\n\n      return () => {\n        unsubscribe();\n      };\n    }\n  }, [user]);\n\n  useEffect(() => {\n    onAuthStateChanged(auth, (user) => {\n      if (user) setUser(user);\n      else setUser(null);\n  \n    });\n  }, []);\n\n  const fetchCoins = async () => {\n    setLoading(true);\n    const { data } = await axios.get(CoinList(currency));\n\n    setCoins(data);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (currency === \"INR\") setSymbol(\"₹\");\n    else if (currency === \"USD\") setSymbol(\"$\");\n\n    fetchCoins();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currency]);\n\n  return (\n    <Crypto.Provider\n      value={{\n        currency,\n        setCurrency,\n        symbol,\n        alert,\n        setAlert,\n        user,\n        coins,\n        loading,\n        watchlist,\n      }}\n    >\n      {children}\n    </Crypto.Provider>\n  );\n};\n\nexport default CryptoContext;\n\nexport const CryptoState = () => {\n  return useContext(Crypto);\n};\n"]},"metadata":{},"sourceType":"module"}