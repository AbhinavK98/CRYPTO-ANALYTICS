{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-crypto-tracker-Firebase-Integration\\\\src\\\\components\\\\CoinInfo.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { HistoricalChart } from \"../config/api\";\nimport { Line } from \"react-chartjs-2\";\nimport { CircularProgress, createTheme, makeStyles, ThemeProvider } from \"@material-ui/core\";\nimport SelectButton from \"./SelectButton\";\nimport { chartDays } from \"../config/data\";\nimport { CryptoState } from \"../CryptoContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CoinInfo = ({\n  coin\n}) => {\n  _s();\n\n  const [historicData, setHistoricData] = useState();\n  const [days, setDays] = useState(1);\n  const {\n    currency\n  } = CryptoState();\n  const useStyles = makeStyles(theme => ({\n    container: {\n      width: \"75%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      marginTop: 25,\n      padding: 40,\n      [theme.breakpoints.down(\"md\")]: {\n        width: \"100%\",\n        marginTop: 0,\n        padding: 20,\n        paddingTop: 0\n      }\n    }\n  }));\n  const classes = useStyles();\n\n  const fetchHistoricData = async () => {\n    const {\n      data\n    } = await axios.get(HistoricalChart(coin.id, days, currency));\n    setHistoricData(data.prices);\n  };\n\n  useEffect(() => {\n    fetchHistoricData(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [days, currency]);\n  const darkTheme = createTheme({\n    palette: {\n      primary: {\n        main: \"#fff\"\n      },\n      type: \"dark\"\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: darkTheme,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.container,\n      children: !historicData ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n        style: {\n          color: \"#baeb0b\"\n        },\n        size: 250,\n        thickness: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Line, {\n          data: {\n            labels: historicData.map(coin => {\n              let date = new Date(coin[0]);\n              let time = date.getHours() > 12 ? `${date.getHours() - 12}:${date.getMinutes()} PM` : `${date.getHours()}:${date.getMinutes()} AM`;\n              return days === 1 ? time : date.toLocaleDateString();\n            }),\n            datasets: [{\n              data: historicData.map(coin => coin[1]),\n              label: `Price ( Past ${days} Days ) in ${currency}`,\n              borderColor: \"#EEBC1D\"\n            }]\n          },\n          options: {\n            elements: {\n              point: {\n                radius: 1\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            marginTop: 20,\n            justifyContent: \"space-around\",\n            width: \"100%\"\n          },\n          children: chartDays.map(day => /*#__PURE__*/_jsxDEV(SelectButton, {\n            onClick: () => setDays(day.value),\n            selected: day.value === days,\n            children: day.label\n          }, day.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CoinInfo, \"gY5gImAQTzqCybazfrDdWTlBRYo=\", true);\n\n_c = CoinInfo;\nexport default CoinInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoinInfo\");","map":{"version":3,"sources":["D:/react-crypto-tracker-Firebase-Integration/src/components/CoinInfo.js"],"names":["axios","useEffect","useState","HistoricalChart","Line","CircularProgress","createTheme","makeStyles","ThemeProvider","SelectButton","chartDays","CryptoState","CoinInfo","coin","historicData","setHistoricData","days","setDays","currency","useStyles","theme","container","width","display","flexDirection","alignItems","justifyContent","marginTop","padding","breakpoints","down","paddingTop","classes","fetchHistoricData","data","get","id","prices","darkTheme","palette","primary","main","type","color","labels","map","date","Date","time","getHours","getMinutes","toLocaleDateString","datasets","label","borderColor","elements","point","radius","day","value"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { HistoricalChart } from \"../config/api\";\nimport { Line } from \"react-chartjs-2\";\nimport {\n  CircularProgress,\n  createTheme,\n  makeStyles,\n  ThemeProvider,\n} from \"@material-ui/core\";\nimport SelectButton from \"./SelectButton\";\nimport { chartDays } from \"../config/data\";\nimport { CryptoState } from \"../CryptoContext\";\n\nconst CoinInfo = ({ coin }) => {\n  const [historicData, setHistoricData] = useState();\n  const [days, setDays] = useState(1);\n  const { currency } = CryptoState();\n\n  const useStyles = makeStyles((theme) => ({\n    container: {\n      width: \"75%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      marginTop: 25,\n      padding: 40,\n      [theme.breakpoints.down(\"md\")]: {\n        width: \"100%\",\n        marginTop: 0,\n        padding: 20,\n        paddingTop: 0,\n      },\n    },\n  }));\n\n  const classes = useStyles();\n\n  const fetchHistoricData = async () => {\n    const { data } = await axios.get(HistoricalChart(coin.id, days, currency));\n\n    setHistoricData(data.prices);\n  };\n\n  useEffect(() => {\n    fetchHistoricData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [days, currency]);\n\n  const darkTheme = createTheme({\n    palette: {\n      primary: {\n        main: \"#fff\",\n      },\n      type: \"dark\",\n    },\n  });\n\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <div className={classes.container}>\n        {!historicData ? (\n          <CircularProgress\n            style={{ color: \"#baeb0b\" }}\n            size={250}\n            thickness={1}\n          />\n        ) : (\n          <>\n            <Line\n              data={{\n                labels: historicData.map((coin) => {\n                  let date = new Date(coin[0]);\n                  let time =\n                    date.getHours() > 12\n                      ? `${date.getHours() - 12}:${date.getMinutes()} PM`\n                      : `${date.getHours()}:${date.getMinutes()} AM`;\n                  return days === 1 ? time : date.toLocaleDateString();\n                }),\n\n                datasets: [\n                  {\n                    data: historicData.map((coin) => coin[1]),\n                    label: `Price ( Past ${days} Days ) in ${currency}`,\n                    borderColor: \"#EEBC1D\",\n                  },\n                ],\n              }}\n              options={{\n                elements: {\n                  point: {\n                    radius: 1,\n                  },\n                },\n              }}\n            />\n            <div\n              style={{\n                display: \"flex\",\n                marginTop: 20,\n                justifyContent: \"space-around\",\n                width: \"100%\",\n              }}\n            >\n              {chartDays.map((day) => (\n                <SelectButton\n                  key={day.value}\n                  onClick={() => setDays(day.value)}\n                  selected={day.value === days}\n                >\n                  {day.label}\n                </SelectButton>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default CoinInfo;\n"]},"metadata":{},"sourceType":"module"}